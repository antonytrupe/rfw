import { ClientEngine, KeyboardControls, MouseControls } from 'lance-gg';
//import Renderer from './Renderer';
import MobileControls from './MobileControls';
import Utils from '../common/Utils';

export default class MyClientEngine extends ClientEngine {

    constructor(gameEngine, options,renderer) {
        console.log('MyClientEngine.constructor')
        console.log('options',options)
        super(gameEngine, options, renderer);
    }

    start() {
        console.log('MyClientEngine.start')
        super.start();

        // handle gui for game condition
        this.gameEngine.on('pc.killed', (obj) => {
           
            
        });

        this.gameEngine.once('client__rendererReady', () => {
            // click event for "try again" button
            document.querySelector('#tryAgain').addEventListener('click', () => {
                if (Utils.isTouchDevice()){
                    this.renderer.enableFullScreen();
                }
                this.socket.emit('requestRestart');
            });

            document.querySelector('#joinGame').addEventListener('click', (clickEvent) => {
                if (Utils.isTouchDevice()){
                    this.renderer.enableFullScreen();
                }
                clickEvent.currentTarget.disabled = true;
                this.socket.emit('requestRestart');
            });

            document.querySelector('#reconnect').addEventListener('click', () => {
                window.location.reload();
            });

            //  Game input
            if (Utils.isTouchDevice()){
                this.controls = new MobileControls(this);
                this.controls.on('fire', () => {
                    this.sendInput('space');
                });
            } else {
                this.controls = new KeyboardControls(this);
                this.controls.bindKey('left', 'left', { repeat: true });
                this.controls.bindKey('right', 'right', { repeat: true });
                this.controls.bindKey('up', 'up', { repeat: true } );
                this.controls.bindKey('space', 'space');
            }

        });
        
        this.gameEngine.on('fireMissile', () => { this.sounds.fireMissile.play(); });
        this.gameEngine.on('missileHit', () => {
            // don't play explosion sound if the player is not in game
            if (this.renderer.playerShip) {
                this.sounds.missileHit.play();
            }
        });

        
    }

    // extend ClientEngine connect to add own events
    connect() {
        return super.connect().then(() => {
            this.socket.on('scoreUpdate', (e) => {
                this.renderer.updateScore(e);
            });

            this.socket.on('disconnect', (e) => {
                console.log('disconnected');
                document.body.classList.add('disconnected');
                document.body.classList.remove('gameActive');
                document.querySelector('#reconnect').disabled = false;
            });

            if ('autostart' in Utils.getUrlVars()) {
                this.socket.emit('requestRestart');
            }
        });
    }
}